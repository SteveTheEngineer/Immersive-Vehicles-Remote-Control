import java.nio.channels.Channels
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.Path

buildscript {
    repositories {
        jcenter()
        maven {
            url = "https://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
    }
}
apply plugin: "net.minecraftforge.gradle.forge"
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

immersiveVehiclesVersion = 3180272 // The version of Immersive Vehicles used, file id on curseforge
version = "1.8"
group = "me.ste.ivremotecontrol" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "ivremotecontrol"

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

// Make sure the libs directory exists
Path libsDirectory = Paths.get("libs");
if(!Files.isDirectory(libsDirectory)) {
    Files.createDirectory(libsDirectory);
}

// Download immersive vehicles if it either does not exist or the version doesn't match the required version
URL downloadUrl = new URL(String.join("\n", new URL("https://addons-ecs.forgesvc.net/api/v2/addon/286703/file/${immersiveVehiclesVersion}/download-url").openConnection().getInputStream().readLines()));
String immersiveVehiclesFilename = Paths.get(downloadUrl.getPath()).getFileName().toString();
Path immersiveVehiclesFile = libsDirectory.resolve(immersiveVehiclesFilename);
if(!Files.isRegularFile(immersiveVehiclesFile)) {
    println("Downloading ${immersiveVehiclesFilename}...");
    new FileOutputStream(immersiveVehiclesFile.toString()).getChannel().transferFrom(Channels.newChannel(downloadUrl.openStream()), 0L, Long.MAX_VALUE);
    println("Download finished");
}

minecraft {
    version = "1.12.2-14.23.5.2847"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20171003"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

repositories {
    maven {
        name = "oc"
        url = "http://maven.cil.li/"
    }
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile "com.mod-buildcraft:buildcraft:6.0.8:dev"  // adds buildcraft to the dev env
    //compile "com.googlecode.efficient-java-matrix-library:ejml:0.24" // adds ejml to the dev env

    // the "provided" configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided "com.mod-buildcraft:buildcraft:6.0.8:dev"

    // the deobf configurations:  "deobfCompile" and "deobfProvided" are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile "com.mod-buildcraft:buildcraft:6.0.8:dev"
    //deobfProvided "com.mod-buildcraft:buildcraft:6.0.8:dev"

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    compile "li.cil.oc:OpenComputers:MC1.12.2-1.7.5.213:api"
    compile files(immersiveVehiclesFile.toString()) // Add immersive vehicles as a dependency
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
                
        // replace version and mcversion
        expand "version":project.version, "mcversion":project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}
